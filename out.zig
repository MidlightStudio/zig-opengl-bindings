//
// Copyright 2024 MIDLIGHT STUDIO
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the “Software”), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// GENERATED WITH https://github.com/MidlightStudio/zig-opengl-bindings
//     API: gles2
//     Version: GL_ES_VERSION_3_0
//     Static: false
//
pub const GLenum = u32;
pub const GLhandleARB = if (@import("builtin").os.tag == .macos) [*c]u0 else c_uint;
pub const GLeglClientBufferEXT = [*c]u0;
pub const GLeglImageOES = [*c]u0;
pub const GLsync = [*c]u0;
pub const _cl_context = opaque {};
pub const _cl_event = opaque {};
pub const GLDEBUGPROC = [*c]const fn (source: GLenum, _type: GLenum, id: u32, severity: GLenum, length: i32, message: [*:0]const u8, userParam: ?*anyopaque) callconv(.C) void;
pub const GLDEBUGPROCARB = [*c]const fn (source: GLenum, _type: GLenum, id: u32, severity: GLenum, length: i32, message: [*:0]const u8, userParam: ?*anyopaque) callconv(.C) void;
pub const GLDEBUGPROCKHR = [*c]const fn (source: GLenum, _type: GLenum, id: u32, severity: GLenum, length: i32, message: [*:0]const u8, userParam: ?*anyopaque) callconv(.C) void;
pub const GLDEBUGPROCAMD = [*c]const fn (id: u32, category: GLenum, severity: GLenum, length: i32, message: [*:0]const u8, userParam: ?*anyopaque) callconv(.C) void;
pub const GLhalfNV = u16;
pub const GLvdpauSurfaceNV = usize;
pub const GLVULKANPROCNV = [*c]const fn () callconv(.C) void;

pub const DEPTH_BUFFER_BIT = 0x00000100;
pub const STENCIL_BUFFER_BIT = 0x00000400;
pub const COLOR_BUFFER_BIT = 0x00004000;
pub const FALSE = 0;
pub const TRUE = 1;
pub const POINTS = 0x0000;
pub const LINES = 0x0001;
pub const LINE_LOOP = 0x0002;
pub const LINE_STRIP = 0x0003;
pub const TRIANGLES = 0x0004;
pub const TRIANGLE_STRIP = 0x0005;
pub const TRIANGLE_FAN = 0x0006;
pub const ZERO = 0;
pub const ONE = 1;
pub const SRC_COLOR = 0x0300;
pub const ONE_MINUS_SRC_COLOR = 0x0301;
pub const SRC_ALPHA = 0x0302;
pub const ONE_MINUS_SRC_ALPHA = 0x0303;
pub const DST_ALPHA = 0x0304;
pub const ONE_MINUS_DST_ALPHA = 0x0305;
pub const DST_COLOR = 0x0306;
pub const ONE_MINUS_DST_COLOR = 0x0307;
pub const SRC_ALPHA_SATURATE = 0x0308;
pub const FUNC_ADD = 0x8006;
pub const BLEND_EQUATION = 0x8009;
pub const BLEND_EQUATION_RGB = 0x8009;
pub const BLEND_EQUATION_ALPHA = 0x883D;
pub const FUNC_SUBTRACT = 0x800A;
pub const FUNC_REVERSE_SUBTRACT = 0x800B;
pub const BLEND_DST_RGB = 0x80C8;
pub const BLEND_SRC_RGB = 0x80C9;
pub const BLEND_DST_ALPHA = 0x80CA;
pub const BLEND_SRC_ALPHA = 0x80CB;
pub const CONSTANT_COLOR = 0x8001;
pub const ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const CONSTANT_ALPHA = 0x8003;
pub const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const BLEND_COLOR = 0x8005;
pub const ARRAY_BUFFER = 0x8892;
pub const ELEMENT_ARRAY_BUFFER = 0x8893;
pub const ARRAY_BUFFER_BINDING = 0x8894;
pub const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const STREAM_DRAW = 0x88E0;
pub const STATIC_DRAW = 0x88E4;
pub const DYNAMIC_DRAW = 0x88E8;
pub const BUFFER_SIZE = 0x8764;
pub const BUFFER_USAGE = 0x8765;
pub const CURRENT_VERTEX_ATTRIB = 0x8626;
pub const FRONT = 0x0404;
pub const BACK = 0x0405;
pub const FRONT_AND_BACK = 0x0408;
pub const TEXTURE_2D = 0x0DE1;
pub const CULL_FACE = 0x0B44;
pub const BLEND = 0x0BE2;
pub const DITHER = 0x0BD0;
pub const STENCIL_TEST = 0x0B90;
pub const DEPTH_TEST = 0x0B71;
pub const SCISSOR_TEST = 0x0C11;
pub const POLYGON_OFFSET_FILL = 0x8037;
pub const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const SAMPLE_COVERAGE = 0x80A0;
pub const NO_ERROR = 0;
pub const INVALID_ENUM = 0x0500;
pub const INVALID_VALUE = 0x0501;
pub const INVALID_OPERATION = 0x0502;
pub const OUT_OF_MEMORY = 0x0505;
pub const CW = 0x0900;
pub const CCW = 0x0901;
pub const LINE_WIDTH = 0x0B21;
pub const ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const CULL_FACE_MODE = 0x0B45;
pub const FRONT_FACE = 0x0B46;
pub const DEPTH_RANGE = 0x0B70;
pub const DEPTH_WRITEMASK = 0x0B72;
pub const DEPTH_CLEAR_VALUE = 0x0B73;
pub const DEPTH_FUNC = 0x0B74;
pub const STENCIL_CLEAR_VALUE = 0x0B91;
pub const STENCIL_FUNC = 0x0B92;
pub const STENCIL_FAIL = 0x0B94;
pub const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub const STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub const STENCIL_REF = 0x0B97;
pub const STENCIL_VALUE_MASK = 0x0B93;
pub const STENCIL_WRITEMASK = 0x0B98;
pub const STENCIL_BACK_FUNC = 0x8800;
pub const STENCIL_BACK_FAIL = 0x8801;
pub const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const STENCIL_BACK_REF = 0x8CA3;
pub const STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const VIEWPORT = 0x0BA2;
pub const SCISSOR_BOX = 0x0C10;
pub const COLOR_CLEAR_VALUE = 0x0C22;
pub const COLOR_WRITEMASK = 0x0C23;
pub const UNPACK_ALIGNMENT = 0x0CF5;
pub const PACK_ALIGNMENT = 0x0D05;
pub const MAX_TEXTURE_SIZE = 0x0D33;
pub const MAX_VIEWPORT_DIMS = 0x0D3A;
pub const SUBPIXEL_BITS = 0x0D50;
pub const RED_BITS = 0x0D52;
pub const GREEN_BITS = 0x0D53;
pub const BLUE_BITS = 0x0D54;
pub const ALPHA_BITS = 0x0D55;
pub const DEPTH_BITS = 0x0D56;
pub const STENCIL_BITS = 0x0D57;
pub const POLYGON_OFFSET_UNITS = 0x2A00;
pub const POLYGON_OFFSET_FACTOR = 0x8038;
pub const TEXTURE_BINDING_2D = 0x8069;
pub const SAMPLE_BUFFERS = 0x80A8;
pub const SAMPLES = 0x80A9;
pub const SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const DONT_CARE = 0x1100;
pub const FASTEST = 0x1101;
pub const NICEST = 0x1102;
pub const GENERATE_MIPMAP_HINT = 0x8192;
pub const BYTE = 0x1400;
pub const UNSIGNED_BYTE = 0x1401;
pub const SHORT = 0x1402;
pub const UNSIGNED_SHORT = 0x1403;
pub const INT = 0x1404;
pub const UNSIGNED_INT = 0x1405;
pub const FLOAT = 0x1406;
pub const FIXED = 0x140C;
pub const DEPTH_COMPONENT = 0x1902;
pub const ALPHA = 0x1906;
pub const RGB = 0x1907;
pub const RGBA = 0x1908;
pub const LUMINANCE = 0x1909;
pub const LUMINANCE_ALPHA = 0x190A;
pub const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const FRAGMENT_SHADER = 0x8B30;
pub const VERTEX_SHADER = 0x8B31;
pub const MAX_VERTEX_ATTRIBS = 0x8869;
pub const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const MAX_VARYING_VECTORS = 0x8DFC;
pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const SHADER_TYPE = 0x8B4F;
pub const DELETE_STATUS = 0x8B80;
pub const LINK_STATUS = 0x8B82;
pub const VALIDATE_STATUS = 0x8B83;
pub const ATTACHED_SHADERS = 0x8B85;
pub const ACTIVE_UNIFORMS = 0x8B86;
pub const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const ACTIVE_ATTRIBUTES = 0x8B89;
pub const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const CURRENT_PROGRAM = 0x8B8D;
pub const NEVER = 0x0200;
pub const LESS = 0x0201;
pub const EQUAL = 0x0202;
pub const LEQUAL = 0x0203;
pub const GREATER = 0x0204;
pub const NOTEQUAL = 0x0205;
pub const GEQUAL = 0x0206;
pub const ALWAYS = 0x0207;
pub const KEEP = 0x1E00;
pub const REPLACE = 0x1E01;
pub const INCR = 0x1E02;
pub const DECR = 0x1E03;
pub const INVERT = 0x150A;
pub const INCR_WRAP = 0x8507;
pub const DECR_WRAP = 0x8508;
pub const VENDOR = 0x1F00;
pub const RENDERER = 0x1F01;
pub const VERSION = 0x1F02;
pub const EXTENSIONS = 0x1F03;
pub const NEAREST = 0x2600;
pub const LINEAR = 0x2601;
pub const NEAREST_MIPMAP_NEAREST = 0x2700;
pub const LINEAR_MIPMAP_NEAREST = 0x2701;
pub const NEAREST_MIPMAP_LINEAR = 0x2702;
pub const LINEAR_MIPMAP_LINEAR = 0x2703;
pub const TEXTURE_MAG_FILTER = 0x2800;
pub const TEXTURE_MIN_FILTER = 0x2801;
pub const TEXTURE_WRAP_S = 0x2802;
pub const TEXTURE_WRAP_T = 0x2803;
pub const TEXTURE = 0x1702;
pub const TEXTURE_CUBE_MAP = 0x8513;
pub const TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const TEXTURE0 = 0x84C0;
pub const TEXTURE1 = 0x84C1;
pub const TEXTURE2 = 0x84C2;
pub const TEXTURE3 = 0x84C3;
pub const TEXTURE4 = 0x84C4;
pub const TEXTURE5 = 0x84C5;
pub const TEXTURE6 = 0x84C6;
pub const TEXTURE7 = 0x84C7;
pub const TEXTURE8 = 0x84C8;
pub const TEXTURE9 = 0x84C9;
pub const TEXTURE10 = 0x84CA;
pub const TEXTURE11 = 0x84CB;
pub const TEXTURE12 = 0x84CC;
pub const TEXTURE13 = 0x84CD;
pub const TEXTURE14 = 0x84CE;
pub const TEXTURE15 = 0x84CF;
pub const TEXTURE16 = 0x84D0;
pub const TEXTURE17 = 0x84D1;
pub const TEXTURE18 = 0x84D2;
pub const TEXTURE19 = 0x84D3;
pub const TEXTURE20 = 0x84D4;
pub const TEXTURE21 = 0x84D5;
pub const TEXTURE22 = 0x84D6;
pub const TEXTURE23 = 0x84D7;
pub const TEXTURE24 = 0x84D8;
pub const TEXTURE25 = 0x84D9;
pub const TEXTURE26 = 0x84DA;
pub const TEXTURE27 = 0x84DB;
pub const TEXTURE28 = 0x84DC;
pub const TEXTURE29 = 0x84DD;
pub const TEXTURE30 = 0x84DE;
pub const TEXTURE31 = 0x84DF;
pub const ACTIVE_TEXTURE = 0x84E0;
pub const REPEAT = 0x2901;
pub const CLAMP_TO_EDGE = 0x812F;
pub const MIRRORED_REPEAT = 0x8370;
pub const FLOAT_VEC2 = 0x8B50;
pub const FLOAT_VEC3 = 0x8B51;
pub const FLOAT_VEC4 = 0x8B52;
pub const INT_VEC2 = 0x8B53;
pub const INT_VEC3 = 0x8B54;
pub const INT_VEC4 = 0x8B55;
pub const BOOL = 0x8B56;
pub const BOOL_VEC2 = 0x8B57;
pub const BOOL_VEC3 = 0x8B58;
pub const BOOL_VEC4 = 0x8B59;
pub const FLOAT_MAT2 = 0x8B5A;
pub const FLOAT_MAT3 = 0x8B5B;
pub const FLOAT_MAT4 = 0x8B5C;
pub const SAMPLER_2D = 0x8B5E;
pub const SAMPLER_CUBE = 0x8B60;
pub const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const COMPILE_STATUS = 0x8B81;
pub const INFO_LOG_LENGTH = 0x8B84;
pub const SHADER_SOURCE_LENGTH = 0x8B88;
pub const SHADER_COMPILER = 0x8DFA;
pub const SHADER_BINARY_FORMATS = 0x8DF8;
pub const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const LOW_FLOAT = 0x8DF0;
pub const MEDIUM_FLOAT = 0x8DF1;
pub const HIGH_FLOAT = 0x8DF2;
pub const LOW_INT = 0x8DF3;
pub const MEDIUM_INT = 0x8DF4;
pub const HIGH_INT = 0x8DF5;
pub const FRAMEBUFFER = 0x8D40;
pub const RENDERBUFFER = 0x8D41;
pub const RGBA4 = 0x8056;
pub const RGB5_A1 = 0x8057;
pub const RGB565 = 0x8D62;
pub const DEPTH_COMPONENT16 = 0x81A5;
pub const STENCIL_INDEX8 = 0x8D48;
pub const RENDERBUFFER_WIDTH = 0x8D42;
pub const RENDERBUFFER_HEIGHT = 0x8D43;
pub const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const RENDERBUFFER_RED_SIZE = 0x8D50;
pub const RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const COLOR_ATTACHMENT0 = 0x8CE0;
pub const DEPTH_ATTACHMENT = 0x8D00;
pub const STENCIL_ATTACHMENT = 0x8D20;
pub const NONE = 0;
pub const FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
pub const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const FRAMEBUFFER_BINDING = 0x8CA6;
pub const RENDERBUFFER_BINDING = 0x8CA7;
pub const MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub const READ_BUFFER = 0x0C02;
pub const UNPACK_ROW_LENGTH = 0x0CF2;
pub const UNPACK_SKIP_ROWS = 0x0CF3;
pub const UNPACK_SKIP_PIXELS = 0x0CF4;
pub const PACK_ROW_LENGTH = 0x0D02;
pub const PACK_SKIP_ROWS = 0x0D03;
pub const PACK_SKIP_PIXELS = 0x0D04;
pub const COLOR = 0x1800;
pub const DEPTH = 0x1801;
pub const STENCIL = 0x1802;
pub const RED = 0x1903;
pub const RGB8 = 0x8051;
pub const RGBA8 = 0x8058;
pub const RGB10_A2 = 0x8059;
pub const TEXTURE_BINDING_3D = 0x806A;
pub const UNPACK_SKIP_IMAGES = 0x806D;
pub const UNPACK_IMAGE_HEIGHT = 0x806E;
pub const TEXTURE_3D = 0x806F;
pub const TEXTURE_WRAP_R = 0x8072;
pub const MAX_3D_TEXTURE_SIZE = 0x8073;
pub const UNSIGNED_INT_2_10_10_10_REV = 0x8368;
pub const MAX_ELEMENTS_VERTICES = 0x80E8;
pub const MAX_ELEMENTS_INDICES = 0x80E9;
pub const TEXTURE_MIN_LOD = 0x813A;
pub const TEXTURE_MAX_LOD = 0x813B;
pub const TEXTURE_BASE_LEVEL = 0x813C;
pub const TEXTURE_MAX_LEVEL = 0x813D;
pub const MIN = 0x8007;
pub const MAX = 0x8008;
pub const DEPTH_COMPONENT24 = 0x81A6;
pub const MAX_TEXTURE_LOD_BIAS = 0x84FD;
pub const TEXTURE_COMPARE_MODE = 0x884C;
pub const TEXTURE_COMPARE_FUNC = 0x884D;
pub const CURRENT_QUERY = 0x8865;
pub const QUERY_RESULT = 0x8866;
pub const QUERY_RESULT_AVAILABLE = 0x8867;
pub const BUFFER_MAPPED = 0x88BC;
pub const BUFFER_MAP_POINTER = 0x88BD;
pub const STREAM_READ = 0x88E1;
pub const STREAM_COPY = 0x88E2;
pub const STATIC_READ = 0x88E5;
pub const STATIC_COPY = 0x88E6;
pub const DYNAMIC_READ = 0x88E9;
pub const DYNAMIC_COPY = 0x88EA;
pub const MAX_DRAW_BUFFERS = 0x8824;
pub const DRAW_BUFFER0 = 0x8825;
pub const DRAW_BUFFER1 = 0x8826;
pub const DRAW_BUFFER2 = 0x8827;
pub const DRAW_BUFFER3 = 0x8828;
pub const DRAW_BUFFER4 = 0x8829;
pub const DRAW_BUFFER5 = 0x882A;
pub const DRAW_BUFFER6 = 0x882B;
pub const DRAW_BUFFER7 = 0x882C;
pub const DRAW_BUFFER8 = 0x882D;
pub const DRAW_BUFFER9 = 0x882E;
pub const DRAW_BUFFER10 = 0x882F;
pub const DRAW_BUFFER11 = 0x8830;
pub const DRAW_BUFFER12 = 0x8831;
pub const DRAW_BUFFER13 = 0x8832;
pub const DRAW_BUFFER14 = 0x8833;
pub const DRAW_BUFFER15 = 0x8834;
pub const MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
pub const MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
pub const SAMPLER_3D = 0x8B5F;
pub const SAMPLER_2D_SHADOW = 0x8B62;
pub const FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
pub const PIXEL_PACK_BUFFER = 0x88EB;
pub const PIXEL_UNPACK_BUFFER = 0x88EC;
pub const PIXEL_PACK_BUFFER_BINDING = 0x88ED;
pub const PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
pub const FLOAT_MAT2x3 = 0x8B65;
pub const FLOAT_MAT2x4 = 0x8B66;
pub const FLOAT_MAT3x2 = 0x8B67;
pub const FLOAT_MAT3x4 = 0x8B68;
pub const FLOAT_MAT4x2 = 0x8B69;
pub const FLOAT_MAT4x3 = 0x8B6A;
pub const SRGB = 0x8C40;
pub const SRGB8 = 0x8C41;
pub const SRGB8_ALPHA8 = 0x8C43;
pub const COMPARE_REF_TO_TEXTURE = 0x884E;
pub const MAJOR_VERSION = 0x821B;
pub const MINOR_VERSION = 0x821C;
pub const NUM_EXTENSIONS = 0x821D;
pub const RGBA32F = 0x8814;
pub const RGB32F = 0x8815;
pub const RGBA16F = 0x881A;
pub const RGB16F = 0x881B;
pub const VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
pub const MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
pub const MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
pub const MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
pub const MAX_VARYING_COMPONENTS = 0x8B4B;
pub const TEXTURE_2D_ARRAY = 0x8C1A;
pub const TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const R11F_G11F_B10F = 0x8C3A;
pub const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const RGB9_E5 = 0x8C3D;
pub const UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
pub const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
pub const TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
pub const TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
pub const TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
pub const TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
pub const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
pub const RASTERIZER_DISCARD = 0x8C89;
pub const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
pub const INTERLEAVED_ATTRIBS = 0x8C8C;
pub const SEPARATE_ATTRIBS = 0x8C8D;
pub const TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub const TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
pub const RGBA32UI = 0x8D70;
pub const RGB32UI = 0x8D71;
pub const RGBA16UI = 0x8D76;
pub const RGB16UI = 0x8D77;
pub const RGBA8UI = 0x8D7C;
pub const RGB8UI = 0x8D7D;
pub const RGBA32I = 0x8D82;
pub const RGB32I = 0x8D83;
pub const RGBA16I = 0x8D88;
pub const RGB16I = 0x8D89;
pub const RGBA8I = 0x8D8E;
pub const RGB8I = 0x8D8F;
pub const RED_INTEGER = 0x8D94;
pub const RGB_INTEGER = 0x8D98;
pub const RGBA_INTEGER = 0x8D99;
pub const SAMPLER_2D_ARRAY = 0x8DC1;
pub const SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
pub const SAMPLER_CUBE_SHADOW = 0x8DC5;
pub const UNSIGNED_INT_VEC2 = 0x8DC6;
pub const UNSIGNED_INT_VEC3 = 0x8DC7;
pub const UNSIGNED_INT_VEC4 = 0x8DC8;
pub const INT_SAMPLER_2D = 0x8DCA;
pub const INT_SAMPLER_3D = 0x8DCB;
pub const INT_SAMPLER_CUBE = 0x8DCC;
pub const INT_SAMPLER_2D_ARRAY = 0x8DCF;
pub const UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
pub const UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
pub const UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
pub const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
pub const BUFFER_ACCESS_FLAGS = 0x911F;
pub const BUFFER_MAP_LENGTH = 0x9120;
pub const BUFFER_MAP_OFFSET = 0x9121;
pub const DEPTH_COMPONENT32F = 0x8CAC;
pub const DEPTH32F_STENCIL8 = 0x8CAD;
pub const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
pub const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
pub const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
pub const FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
pub const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
pub const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
pub const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
pub const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
pub const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
pub const FRAMEBUFFER_DEFAULT = 0x8218;
pub const FRAMEBUFFER_UNDEFINED = 0x8219;
pub const DEPTH_STENCIL_ATTACHMENT = 0x821A;
pub const DEPTH_STENCIL = 0x84F9;
pub const UNSIGNED_INT_24_8 = 0x84FA;
pub const DEPTH24_STENCIL8 = 0x88F0;
pub const UNSIGNED_NORMALIZED = 0x8C17;
pub const DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const READ_FRAMEBUFFER = 0x8CA8;
pub const DRAW_FRAMEBUFFER = 0x8CA9;
pub const READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub const RENDERBUFFER_SAMPLES = 0x8CAB;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
pub const MAX_COLOR_ATTACHMENTS = 0x8CDF;
pub const COLOR_ATTACHMENT1 = 0x8CE1;
pub const COLOR_ATTACHMENT2 = 0x8CE2;
pub const COLOR_ATTACHMENT3 = 0x8CE3;
pub const COLOR_ATTACHMENT4 = 0x8CE4;
pub const COLOR_ATTACHMENT5 = 0x8CE5;
pub const COLOR_ATTACHMENT6 = 0x8CE6;
pub const COLOR_ATTACHMENT7 = 0x8CE7;
pub const COLOR_ATTACHMENT8 = 0x8CE8;
pub const COLOR_ATTACHMENT9 = 0x8CE9;
pub const COLOR_ATTACHMENT10 = 0x8CEA;
pub const COLOR_ATTACHMENT11 = 0x8CEB;
pub const COLOR_ATTACHMENT12 = 0x8CEC;
pub const COLOR_ATTACHMENT13 = 0x8CED;
pub const COLOR_ATTACHMENT14 = 0x8CEE;
pub const COLOR_ATTACHMENT15 = 0x8CEF;
pub const COLOR_ATTACHMENT16 = 0x8CF0;
pub const COLOR_ATTACHMENT17 = 0x8CF1;
pub const COLOR_ATTACHMENT18 = 0x8CF2;
pub const COLOR_ATTACHMENT19 = 0x8CF3;
pub const COLOR_ATTACHMENT20 = 0x8CF4;
pub const COLOR_ATTACHMENT21 = 0x8CF5;
pub const COLOR_ATTACHMENT22 = 0x8CF6;
pub const COLOR_ATTACHMENT23 = 0x8CF7;
pub const COLOR_ATTACHMENT24 = 0x8CF8;
pub const COLOR_ATTACHMENT25 = 0x8CF9;
pub const COLOR_ATTACHMENT26 = 0x8CFA;
pub const COLOR_ATTACHMENT27 = 0x8CFB;
pub const COLOR_ATTACHMENT28 = 0x8CFC;
pub const COLOR_ATTACHMENT29 = 0x8CFD;
pub const COLOR_ATTACHMENT30 = 0x8CFE;
pub const COLOR_ATTACHMENT31 = 0x8CFF;
pub const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
pub const MAX_SAMPLES = 0x8D57;
pub const HALF_FLOAT = 0x140B;
pub const MAP_READ_BIT = 0x0001;
pub const MAP_WRITE_BIT = 0x0002;
pub const MAP_INVALIDATE_RANGE_BIT = 0x0004;
pub const MAP_INVALIDATE_BUFFER_BIT = 0x0008;
pub const MAP_FLUSH_EXPLICIT_BIT = 0x0010;
pub const MAP_UNSYNCHRONIZED_BIT = 0x0020;
pub const RG = 0x8227;
pub const RG_INTEGER = 0x8228;
pub const R8 = 0x8229;
pub const RG8 = 0x822B;
pub const R16F = 0x822D;
pub const R32F = 0x822E;
pub const RG16F = 0x822F;
pub const RG32F = 0x8230;
pub const R8I = 0x8231;
pub const R8UI = 0x8232;
pub const R16I = 0x8233;
pub const R16UI = 0x8234;
pub const R32I = 0x8235;
pub const R32UI = 0x8236;
pub const RG8I = 0x8237;
pub const RG8UI = 0x8238;
pub const RG16I = 0x8239;
pub const RG16UI = 0x823A;
pub const RG32I = 0x823B;
pub const RG32UI = 0x823C;
pub const VERTEX_ARRAY_BINDING = 0x85B5;
pub const R8_SNORM = 0x8F94;
pub const RG8_SNORM = 0x8F95;
pub const RGB8_SNORM = 0x8F96;
pub const RGBA8_SNORM = 0x8F97;
pub const SIGNED_NORMALIZED = 0x8F9C;
pub const PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
pub const COPY_READ_BUFFER = 0x8F36;
pub const COPY_WRITE_BUFFER = 0x8F37;
pub const COPY_READ_BUFFER_BINDING = 0x8F36;
pub const COPY_WRITE_BUFFER_BINDING = 0x8F37;
pub const UNIFORM_BUFFER = 0x8A11;
pub const UNIFORM_BUFFER_BINDING = 0x8A28;
pub const UNIFORM_BUFFER_START = 0x8A29;
pub const UNIFORM_BUFFER_SIZE = 0x8A2A;
pub const MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
pub const MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
pub const MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
pub const MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
pub const MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
pub const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
pub const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
pub const UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
pub const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
pub const ACTIVE_UNIFORM_BLOCKS = 0x8A36;
pub const UNIFORM_TYPE = 0x8A37;
pub const UNIFORM_SIZE = 0x8A38;
pub const UNIFORM_NAME_LENGTH = 0x8A39;
pub const UNIFORM_BLOCK_INDEX = 0x8A3A;
pub const UNIFORM_OFFSET = 0x8A3B;
pub const UNIFORM_ARRAY_STRIDE = 0x8A3C;
pub const UNIFORM_MATRIX_STRIDE = 0x8A3D;
pub const UNIFORM_IS_ROW_MAJOR = 0x8A3E;
pub const UNIFORM_BLOCK_BINDING = 0x8A3F;
pub const UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
pub const UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
pub const UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
pub const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
pub const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
pub const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
pub const INVALID_INDEX = 0xFFFFFFFF;
pub const MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
pub const MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
pub const MAX_SERVER_WAIT_TIMEOUT = 0x9111;
pub const OBJECT_TYPE = 0x9112;
pub const SYNC_CONDITION = 0x9113;
pub const SYNC_STATUS = 0x9114;
pub const SYNC_FLAGS = 0x9115;
pub const SYNC_FENCE = 0x9116;
pub const SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
pub const UNSIGNALED = 0x9118;
pub const SIGNALED = 0x9119;
pub const ALREADY_SIGNALED = 0x911A;
pub const TIMEOUT_EXPIRED = 0x911B;
pub const CONDITION_SATISFIED = 0x911C;
pub const WAIT_FAILED = 0x911D;
pub const SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
pub const TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
pub const VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
pub const ANY_SAMPLES_PASSED = 0x8C2F;
pub const ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
pub const SAMPLER_BINDING = 0x8919;
pub const RGB10_A2UI = 0x906F;
pub const TEXTURE_SWIZZLE_R = 0x8E42;
pub const TEXTURE_SWIZZLE_G = 0x8E43;
pub const TEXTURE_SWIZZLE_B = 0x8E44;
pub const TEXTURE_SWIZZLE_A = 0x8E45;
pub const GREEN = 0x1904;
pub const BLUE = 0x1905;
pub const INT_2_10_10_10_REV = 0x8D9F;
pub const TRANSFORM_FEEDBACK = 0x8E22;
pub const TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
pub const TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
pub const TRANSFORM_FEEDBACK_BINDING = 0x8E25;
pub const PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
pub const PROGRAM_BINARY_LENGTH = 0x8741;
pub const NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
pub const PROGRAM_BINARY_FORMATS = 0x87FF;
pub const COMPRESSED_R11_EAC = 0x9270;
pub const COMPRESSED_SIGNED_R11_EAC = 0x9271;
pub const COMPRESSED_RG11_EAC = 0x9272;
pub const COMPRESSED_SIGNED_RG11_EAC = 0x9273;
pub const COMPRESSED_RGB8_ETC2 = 0x9274;
pub const COMPRESSED_SRGB8_ETC2 = 0x9275;
pub const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
pub const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
pub const COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
pub const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
pub const TEXTURE_IMMUTABLE_FORMAT = 0x912F;
pub const MAX_ELEMENT_INDEX = 0x8D6B;
pub const NUM_SAMPLE_COUNTS = 0x9380;
pub const TEXTURE_IMMUTABLE_LEVELS = 0x82DF;

pub var activeTexture: *const fn(texture: u32) callconv(.C) void = undefined;
pub var attachShader: *const fn(program: u32, shader: u32) callconv(.C) void = undefined;
pub var bindAttribLocation: *const fn(program: u32, index: u32, name: [*c]const i8) callconv(.C) void = undefined;
pub var bindBuffer: *const fn(target: u32, buffer: u32) callconv(.C) void = undefined;
pub var bindFramebuffer: *const fn(target: u32, framebuffer: u32) callconv(.C) void = undefined;
pub var bindRenderbuffer: *const fn(target: u32, renderbuffer: u32) callconv(.C) void = undefined;
pub var bindTexture: *const fn(target: u32, texture: u32) callconv(.C) void = undefined;
pub var blendColor: *const fn(red: f32, green: f32, blue: f32, alpha: f32) callconv(.C) void = undefined;
pub var blendEquation: *const fn(mode: u32) callconv(.C) void = undefined;
pub var blendEquationSeparate: *const fn(modeRGB: u32, modeAlpha: u32) callconv(.C) void = undefined;
pub var blendFunc: *const fn(sfactor: u32, dfactor: u32) callconv(.C) void = undefined;
pub var blendFuncSeparate: *const fn(sfactorRGB: u32, dfactorRGB: u32, sfactorAlpha: u32, dfactorAlpha: u32) callconv(.C) void = undefined;
pub var bufferData: *const fn(target: u32, size: isize, data: [*c]const u0, usage: u32) callconv(.C) void = undefined;
pub var bufferSubData: *const fn(target: u32, offset: usize, size: isize, data: [*c]const u0) callconv(.C) void = undefined;
pub var checkFramebufferStatus: *const fn(target: u32) callconv(.C) u32 = undefined;
pub var clear: *const fn(mask: u32) callconv(.C) void = undefined;
pub var clearColor: *const fn(red: f32, green: f32, blue: f32, alpha: f32) callconv(.C) void = undefined;
pub var clearDepthf: *const fn(d: f32) callconv(.C) void = undefined;
pub var clearStencil: *const fn(s: i32) callconv(.C) void = undefined;
pub var colorMask: *const fn(red: u8, green: u8, blue: u8, alpha: u8) callconv(.C) void = undefined;
pub var compileShader: *const fn(shader: u32) callconv(.C) void = undefined;
pub var compressedTexImage2D: *const fn(target: u32, level: i32, internalformat: u32, width: i32, height: i32, border: i32, imageSize: i32, data: [*c]const u0) callconv(.C) void = undefined;
pub var compressedTexSubImage2D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: [*c]const u0) callconv(.C) void = undefined;
pub var copyTexImage2D: *const fn(target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32) callconv(.C) void = undefined;
pub var copyTexSubImage2D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) callconv(.C) void = undefined;
pub var createProgram: *const fn() callconv(.C) u32 = undefined;
pub var createShader: *const fn(type: u32) callconv(.C) u32 = undefined;
pub var cullFace: *const fn(mode: u32) callconv(.C) void = undefined;
pub var deleteBuffers: *const fn(n: i32, buffers: [*c]const u32) callconv(.C) void = undefined;
pub var deleteFramebuffers: *const fn(n: i32, framebuffers: [*c]const u32) callconv(.C) void = undefined;
pub var deleteProgram: *const fn(program: u32) callconv(.C) void = undefined;
pub var deleteRenderbuffers: *const fn(n: i32, renderbuffers: [*c]const u32) callconv(.C) void = undefined;
pub var deleteShader: *const fn(shader: u32) callconv(.C) void = undefined;
pub var deleteTextures: *const fn(n: i32, textures: [*c]const u32) callconv(.C) void = undefined;
pub var depthFunc: *const fn(func: u32) callconv(.C) void = undefined;
pub var depthMask: *const fn(flag: u8) callconv(.C) void = undefined;
pub var depthRangef: *const fn(n: f32, f: f32) callconv(.C) void = undefined;
pub var detachShader: *const fn(program: u32, shader: u32) callconv(.C) void = undefined;
pub var disable: *const fn(cap: u32) callconv(.C) void = undefined;
pub var disableVertexAttribArray: *const fn(index: u32) callconv(.C) void = undefined;
pub var drawArrays: *const fn(mode: u32, first: i32, count: i32) callconv(.C) void = undefined;
pub var drawElements: *const fn(mode: u32, count: i32, type: u32, indices: [*c]const u0) callconv(.C) void = undefined;
pub var enable: *const fn(cap: u32) callconv(.C) void = undefined;
pub var enableVertexAttribArray: *const fn(index: u32) callconv(.C) void = undefined;
pub var finish: *const fn() callconv(.C) void = undefined;
pub var flush: *const fn() callconv(.C) void = undefined;
pub var framebufferRenderbuffer: *const fn(target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) callconv(.C) void = undefined;
pub var framebufferTexture2D: *const fn(target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) callconv(.C) void = undefined;
pub var frontFace: *const fn(mode: u32) callconv(.C) void = undefined;
pub var genBuffers: *const fn(n: i32, buffers: [*c]u32) callconv(.C) void = undefined;
pub var generateMipmap: *const fn(target: u32) callconv(.C) void = undefined;
pub var genFramebuffers: *const fn(n: i32, framebuffers: [*c]u32) callconv(.C) void = undefined;
pub var genRenderbuffers: *const fn(n: i32, renderbuffers: [*c]u32) callconv(.C) void = undefined;
pub var genTextures: *const fn(n: i32, textures: [*c]u32) callconv(.C) void = undefined;
pub var getActiveAttrib: *const fn(program: u32, index: u32, bufSize: i32, length: [*c]i32, size: [*c]i32, type: [*c]u32, name: [*c]i8) callconv(.C) void = undefined;
pub var getActiveUniform: *const fn(program: u32, index: u32, bufSize: i32, length: [*c]i32, size: [*c]i32, type: [*c]u32, name: [*c]i8) callconv(.C) void = undefined;
pub var getAttachedShaders: *const fn(program: u32, maxCount: i32, count: [*c]i32, shaders: [*c]u32) callconv(.C) void = undefined;
pub var getAttribLocation: *const fn(program: u32, name: [*c]const i8) callconv(.C) i32 = undefined;
pub var getBooleanv: *const fn(pname: u32, data: [*c]u8) callconv(.C) void = undefined;
pub var getBufferParameteriv: *const fn(target: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getError: *const fn() callconv(.C) u32 = undefined;
pub var getFloatv: *const fn(pname: u32, data: [*c]f32) callconv(.C) void = undefined;
pub var getFramebufferAttachmentParameteriv: *const fn(target: u32, attachment: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getIntegerv: *const fn(pname: u32, data: [*c]i32) callconv(.C) void = undefined;
pub var getProgramiv: *const fn(program: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getProgramInfoLog: *const fn(program: u32, bufSize: i32, length: [*c]i32, infoLog: [*c]i8) callconv(.C) void = undefined;
pub var getRenderbufferParameteriv: *const fn(target: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getShaderiv: *const fn(shader: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getShaderInfoLog: *const fn(shader: u32, bufSize: i32, length: [*c]i32, infoLog: [*c]i8) callconv(.C) void = undefined;
pub var getShaderPrecisionFormat: *const fn(shadertype: u32, precisiontype: u32, range: [*c]i32, precision: [*c]i32) callconv(.C) void = undefined;
pub var getShaderSource: *const fn(shader: u32, bufSize: i32, length: [*c]i32, source: [*c]i8) callconv(.C) void = undefined;
pub var getString: *const fn(name: u32) callconv(.C) u8 = undefined;
pub var getTexParameterfv: *const fn(target: u32, pname: u32, params: [*c]f32) callconv(.C) void = undefined;
pub var getTexParameteriv: *const fn(target: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getUniformfv: *const fn(program: u32, location: i32, params: [*c]f32) callconv(.C) void = undefined;
pub var getUniformiv: *const fn(program: u32, location: i32, params: [*c]i32) callconv(.C) void = undefined;
pub var getUniformLocation: *const fn(program: u32, name: [*c]const i8) callconv(.C) i32 = undefined;
pub var getVertexAttribfv: *const fn(index: u32, pname: u32, params: [*c]f32) callconv(.C) void = undefined;
pub var getVertexAttribiv: *const fn(index: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getVertexAttribPointerv: *const fn(index: u32, pname: u32, pointer: [*c][*c]u0) callconv(.C) void = undefined;
pub var hint: *const fn(target: u32, mode: u32) callconv(.C) void = undefined;
pub var isBuffer: *const fn(buffer: u32) callconv(.C) u8 = undefined;
pub var isEnabled: *const fn(cap: u32) callconv(.C) u8 = undefined;
pub var isFramebuffer: *const fn(framebuffer: u32) callconv(.C) u8 = undefined;
pub var isProgram: *const fn(program: u32) callconv(.C) u8 = undefined;
pub var isRenderbuffer: *const fn(renderbuffer: u32) callconv(.C) u8 = undefined;
pub var isShader: *const fn(shader: u32) callconv(.C) u8 = undefined;
pub var isTexture: *const fn(texture: u32) callconv(.C) u8 = undefined;
pub var lineWidth: *const fn(width: f32) callconv(.C) void = undefined;
pub var linkProgram: *const fn(program: u32) callconv(.C) void = undefined;
pub var pixelStorei: *const fn(pname: u32, param: i32) callconv(.C) void = undefined;
pub var polygonOffset: *const fn(factor: f32, units: f32) callconv(.C) void = undefined;
pub var readPixels: *const fn(x: i32, y: i32, width: i32, height: i32, format: u32, type: u32, pixels: [*c]u0) callconv(.C) void = undefined;
pub var releaseShaderCompiler: *const fn() callconv(.C) void = undefined;
pub var renderbufferStorage: *const fn(target: u32, internalformat: u32, width: i32, height: i32) callconv(.C) void = undefined;
pub var sampleCoverage: *const fn(value: f32, invert: u8) callconv(.C) void = undefined;
pub var scissor: *const fn(x: i32, y: i32, width: i32, height: i32) callconv(.C) void = undefined;
pub var shaderBinary: *const fn(count: i32, shaders: [*c]const u32, binaryFormat: u32, binary: [*c]const u0, length: i32) callconv(.C) void = undefined;
pub var shaderSource: *const fn(shader: u32, count: i32, string: [*c]const [*c]const i8, length: [*c]const i32) callconv(.C) void = undefined;
pub var stencilFunc: *const fn(func: u32, ref: i32, mask: u32) callconv(.C) void = undefined;
pub var stencilFuncSeparate: *const fn(face: u32, func: u32, ref: i32, mask: u32) callconv(.C) void = undefined;
pub var stencilMask: *const fn(mask: u32) callconv(.C) void = undefined;
pub var stencilMaskSeparate: *const fn(face: u32, mask: u32) callconv(.C) void = undefined;
pub var stencilOp: *const fn(fail: u32, zfail: u32, zpass: u32) callconv(.C) void = undefined;
pub var stencilOpSeparate: *const fn(face: u32, sfail: u32, dpfail: u32, dppass: u32) callconv(.C) void = undefined;
pub var texImage2D: *const fn(target: u32, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: u32, type: u32, pixels: [*c]const u0) callconv(.C) void = undefined;
pub var texParameterf: *const fn(target: u32, pname: u32, param: f32) callconv(.C) void = undefined;
pub var texParameterfv: *const fn(target: u32, pname: u32, params: [*c]const f32) callconv(.C) void = undefined;
pub var texParameteri: *const fn(target: u32, pname: u32, param: i32) callconv(.C) void = undefined;
pub var texParameteriv: *const fn(target: u32, pname: u32, params: [*c]const i32) callconv(.C) void = undefined;
pub var texSubImage2D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: [*c]const u0) callconv(.C) void = undefined;
pub var uniform1f: *const fn(location: i32, v0: f32) callconv(.C) void = undefined;
pub var uniform1fv: *const fn(location: i32, count: i32, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniform1i: *const fn(location: i32, v0: i32) callconv(.C) void = undefined;
pub var uniform1iv: *const fn(location: i32, count: i32, value: [*c]const i32) callconv(.C) void = undefined;
pub var uniform2f: *const fn(location: i32, v0: f32, v1: f32) callconv(.C) void = undefined;
pub var uniform2fv: *const fn(location: i32, count: i32, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniform2i: *const fn(location: i32, v0: i32, v1: i32) callconv(.C) void = undefined;
pub var uniform2iv: *const fn(location: i32, count: i32, value: [*c]const i32) callconv(.C) void = undefined;
pub var uniform3f: *const fn(location: i32, v0: f32, v1: f32, v2: f32) callconv(.C) void = undefined;
pub var uniform3fv: *const fn(location: i32, count: i32, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniform3i: *const fn(location: i32, v0: i32, v1: i32, v2: i32) callconv(.C) void = undefined;
pub var uniform3iv: *const fn(location: i32, count: i32, value: [*c]const i32) callconv(.C) void = undefined;
pub var uniform4f: *const fn(location: i32, v0: f32, v1: f32, v2: f32, v3: f32) callconv(.C) void = undefined;
pub var uniform4fv: *const fn(location: i32, count: i32, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniform4i: *const fn(location: i32, v0: i32, v1: i32, v2: i32, v3: i32) callconv(.C) void = undefined;
pub var uniform4iv: *const fn(location: i32, count: i32, value: [*c]const i32) callconv(.C) void = undefined;
pub var uniformMatrix2fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix3fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix4fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var useProgram: *const fn(program: u32) callconv(.C) void = undefined;
pub var validateProgram: *const fn(program: u32) callconv(.C) void = undefined;
pub var vertexAttrib1f: *const fn(index: u32, x: f32) callconv(.C) void = undefined;
pub var vertexAttrib1fv: *const fn(index: u32, v: [*c]const f32) callconv(.C) void = undefined;
pub var vertexAttrib2f: *const fn(index: u32, x: f32, y: f32) callconv(.C) void = undefined;
pub var vertexAttrib2fv: *const fn(index: u32, v: [*c]const f32) callconv(.C) void = undefined;
pub var vertexAttrib3f: *const fn(index: u32, x: f32, y: f32, z: f32) callconv(.C) void = undefined;
pub var vertexAttrib3fv: *const fn(index: u32, v: [*c]const f32) callconv(.C) void = undefined;
pub var vertexAttrib4f: *const fn(index: u32, x: f32, y: f32, z: f32, w: f32) callconv(.C) void = undefined;
pub var vertexAttrib4fv: *const fn(index: u32, v: [*c]const f32) callconv(.C) void = undefined;
pub var vertexAttribPointer: *const fn(index: u32, size: i32, type: u32, normalized: u8, stride: i32, pointer: [*c]const u0) callconv(.C) void = undefined;
pub var viewport: *const fn(x: i32, y: i32, width: i32, height: i32) callconv(.C) void = undefined;
pub var readBuffer: *const fn(src: u32) callconv(.C) void = undefined;
pub var drawRangeElements: *const fn(mode: u32, start: u32, end: u32, count: i32, type: u32, indices: [*c]const u0) callconv(.C) void = undefined;
pub var texImage3D: *const fn(target: u32, level: i32, internalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, type: u32, pixels: [*c]const u0) callconv(.C) void = undefined;
pub var texSubImage3D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, type: u32, pixels: [*c]const u0) callconv(.C) void = undefined;
pub var copyTexSubImage3D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) callconv(.C) void = undefined;
pub var compressedTexImage3D: *const fn(target: u32, level: i32, internalformat: u32, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: [*c]const u0) callconv(.C) void = undefined;
pub var compressedTexSubImage3D: *const fn(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: [*c]const u0) callconv(.C) void = undefined;
pub var genQueries: *const fn(n: i32, ids: [*c]u32) callconv(.C) void = undefined;
pub var deleteQueries: *const fn(n: i32, ids: [*c]const u32) callconv(.C) void = undefined;
pub var isQuery: *const fn(id: u32) callconv(.C) u8 = undefined;
pub var beginQuery: *const fn(target: u32, id: u32) callconv(.C) void = undefined;
pub var endQuery: *const fn(target: u32) callconv(.C) void = undefined;
pub var getQueryiv: *const fn(target: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getQueryObjectuiv: *const fn(id: u32, pname: u32, params: [*c]u32) callconv(.C) void = undefined;
pub var unmapBuffer: *const fn(target: u32) callconv(.C) u8 = undefined;
pub var getBufferPointerv: *const fn(target: u32, pname: u32, params: [*c][*c]u0) callconv(.C) void = undefined;
pub var drawBuffers: *const fn(n: i32, bufs: [*c]const u32) callconv(.C) void = undefined;
pub var uniformMatrix2x3fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix3x2fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix2x4fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix4x2fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix3x4fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var uniformMatrix4x3fv: *const fn(location: i32, count: i32, transpose: u8, value: [*c]const f32) callconv(.C) void = undefined;
pub var blitFramebuffer: *const fn(srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32) callconv(.C) void = undefined;
pub var renderbufferStorageMultisample: *const fn(target: u32, samples: i32, internalformat: u32, width: i32, height: i32) callconv(.C) void = undefined;
pub var framebufferTextureLayer: *const fn(target: u32, attachment: u32, texture: u32, level: i32, layer: i32) callconv(.C) void = undefined;
pub var mapBufferRange: *const fn(target: u32, offset: usize, length: isize, access: u32) callconv(.C) [*c]u0 = undefined;
pub var flushMappedBufferRange: *const fn(target: u32, offset: usize, length: isize) callconv(.C) void = undefined;
pub var bindVertexArray: *const fn(array: u32) callconv(.C) void = undefined;
pub var deleteVertexArrays: *const fn(n: i32, arrays: [*c]const u32) callconv(.C) void = undefined;
pub var genVertexArrays: *const fn(n: i32, arrays: [*c]u32) callconv(.C) void = undefined;
pub var isVertexArray: *const fn(array: u32) callconv(.C) u8 = undefined;
pub var getIntegeri_v: *const fn(target: u32, index: u32, data: [*c]i32) callconv(.C) void = undefined;
pub var beginTransformFeedback: *const fn(primitiveMode: u32) callconv(.C) void = undefined;
pub var endTransformFeedback: *const fn() callconv(.C) void = undefined;
pub var bindBufferRange: *const fn(target: u32, index: u32, buffer: u32, offset: usize, size: isize) callconv(.C) void = undefined;
pub var bindBufferBase: *const fn(target: u32, index: u32, buffer: u32) callconv(.C) void = undefined;
pub var transformFeedbackVaryings: *const fn(program: u32, count: i32, varyings: [*c]const [*c]const i8, bufferMode: u32) callconv(.C) void = undefined;
pub var getTransformFeedbackVarying: *const fn(program: u32, index: u32, bufSize: i32, length: [*c]i32, size: [*c]i32, type: [*c]u32, name: [*c]i8) callconv(.C) void = undefined;
pub var vertexAttribIPointer: *const fn(index: u32, size: i32, type: u32, stride: i32, pointer: [*c]const u0) callconv(.C) void = undefined;
pub var getVertexAttribIiv: *const fn(index: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getVertexAttribIuiv: *const fn(index: u32, pname: u32, params: [*c]u32) callconv(.C) void = undefined;
pub var vertexAttribI4i: *const fn(index: u32, x: i32, y: i32, z: i32, w: i32) callconv(.C) void = undefined;
pub var vertexAttribI4ui: *const fn(index: u32, x: u32, y: u32, z: u32, w: u32) callconv(.C) void = undefined;
pub var vertexAttribI4iv: *const fn(index: u32, v: [*c]const i32) callconv(.C) void = undefined;
pub var vertexAttribI4uiv: *const fn(index: u32, v: [*c]const u32) callconv(.C) void = undefined;
pub var getUniformuiv: *const fn(program: u32, location: i32, params: [*c]u32) callconv(.C) void = undefined;
pub var getFragDataLocation: *const fn(program: u32, name: [*c]const i8) callconv(.C) i32 = undefined;
pub var uniform1ui: *const fn(location: i32, v0: u32) callconv(.C) void = undefined;
pub var uniform2ui: *const fn(location: i32, v0: u32, v1: u32) callconv(.C) void = undefined;
pub var uniform3ui: *const fn(location: i32, v0: u32, v1: u32, v2: u32) callconv(.C) void = undefined;
pub var uniform4ui: *const fn(location: i32, v0: u32, v1: u32, v2: u32, v3: u32) callconv(.C) void = undefined;
pub var uniform1uiv: *const fn(location: i32, count: i32, value: [*c]const u32) callconv(.C) void = undefined;
pub var uniform2uiv: *const fn(location: i32, count: i32, value: [*c]const u32) callconv(.C) void = undefined;
pub var uniform3uiv: *const fn(location: i32, count: i32, value: [*c]const u32) callconv(.C) void = undefined;
pub var uniform4uiv: *const fn(location: i32, count: i32, value: [*c]const u32) callconv(.C) void = undefined;
pub var clearBufferiv: *const fn(buffer: u32, drawbuffer: i32, value: [*c]const i32) callconv(.C) void = undefined;
pub var clearBufferuiv: *const fn(buffer: u32, drawbuffer: i32, value: [*c]const u32) callconv(.C) void = undefined;
pub var clearBufferfv: *const fn(buffer: u32, drawbuffer: i32, value: [*c]const f32) callconv(.C) void = undefined;
pub var clearBufferfi: *const fn(buffer: u32, drawbuffer: i32, depth: f32, stencil: i32) callconv(.C) void = undefined;
pub var getStringi: *const fn(name: u32, index: u32) callconv(.C) u8 = undefined;
pub var copyBufferSubData: *const fn(readTarget: u32, writeTarget: u32, readOffset: usize, writeOffset: usize, size: isize) callconv(.C) void = undefined;
pub var getUniformIndices: *const fn(program: u32, uniformCount: i32, uniformNames: [*c]const [*c]const i8, uniformIndices: [*c]u32) callconv(.C) void = undefined;
pub var getActiveUniformsiv: *const fn(program: u32, uniformCount: i32, uniformIndices: [*c]const u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getUniformBlockIndex: *const fn(program: u32, uniformBlockName: [*c]const i8) callconv(.C) u32 = undefined;
pub var getActiveUniformBlockiv: *const fn(program: u32, uniformBlockIndex: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getActiveUniformBlockName: *const fn(program: u32, uniformBlockIndex: u32, bufSize: i32, length: [*c]i32, uniformBlockName: [*c]i8) callconv(.C) void = undefined;
pub var uniformBlockBinding: *const fn(program: u32, uniformBlockIndex: u32, uniformBlockBinding: u32) callconv(.C) void = undefined;
pub var drawArraysInstanced: *const fn(mode: u32, first: i32, count: i32, instancecount: i32) callconv(.C) void = undefined;
pub var drawElementsInstanced: *const fn(mode: u32, count: i32, type: u32, indices: [*c]const u0, instancecount: i32) callconv(.C) void = undefined;
pub var fenceSync: *const fn(condition: u32, flags: u32) callconv(.C) GLsync = undefined;
pub var isSync: *const fn(sync: GLsync) callconv(.C) u8 = undefined;
pub var deleteSync: *const fn(sync: GLsync) callconv(.C) void = undefined;
pub var clientWaitSync: *const fn(sync: GLsync, flags: u32, timeout: u64) callconv(.C) u32 = undefined;
pub var waitSync: *const fn(sync: GLsync, flags: u32, timeout: u64) callconv(.C) void = undefined;
pub var getInteger64v: *const fn(pname: u32, data: [*c]i64) callconv(.C) void = undefined;
pub var getSynciv: *const fn(sync: GLsync, pname: u32, count: i32, length: [*c]i32, values: [*c]i32) callconv(.C) void = undefined;
pub var getInteger64i_v: *const fn(target: u32, index: u32, data: [*c]i64) callconv(.C) void = undefined;
pub var getBufferParameteri64v: *const fn(target: u32, pname: u32, params: [*c]i64) callconv(.C) void = undefined;
pub var genSamplers: *const fn(count: i32, samplers: [*c]u32) callconv(.C) void = undefined;
pub var deleteSamplers: *const fn(count: i32, samplers: [*c]const u32) callconv(.C) void = undefined;
pub var isSampler: *const fn(sampler: u32) callconv(.C) u8 = undefined;
pub var bindSampler: *const fn(unit: u32, sampler: u32) callconv(.C) void = undefined;
pub var samplerParameteri: *const fn(sampler: u32, pname: u32, param: i32) callconv(.C) void = undefined;
pub var samplerParameteriv: *const fn(sampler: u32, pname: u32, param: [*c]const i32) callconv(.C) void = undefined;
pub var samplerParameterf: *const fn(sampler: u32, pname: u32, param: f32) callconv(.C) void = undefined;
pub var samplerParameterfv: *const fn(sampler: u32, pname: u32, param: [*c]const f32) callconv(.C) void = undefined;
pub var getSamplerParameteriv: *const fn(sampler: u32, pname: u32, params: [*c]i32) callconv(.C) void = undefined;
pub var getSamplerParameterfv: *const fn(sampler: u32, pname: u32, params: [*c]f32) callconv(.C) void = undefined;
pub var vertexAttribDivisor: *const fn(index: u32, divisor: u32) callconv(.C) void = undefined;
pub var bindTransformFeedback: *const fn(target: u32, id: u32) callconv(.C) void = undefined;
pub var deleteTransformFeedbacks: *const fn(n: i32, ids: [*c]const u32) callconv(.C) void = undefined;
pub var genTransformFeedbacks: *const fn(n: i32, ids: [*c]u32) callconv(.C) void = undefined;
pub var isTransformFeedback: *const fn(id: u32) callconv(.C) u8 = undefined;
pub var pauseTransformFeedback: *const fn() callconv(.C) void = undefined;
pub var resumeTransformFeedback: *const fn() callconv(.C) void = undefined;
pub var getProgramBinary: *const fn(program: u32, bufSize: i32, length: [*c]i32, binaryFormat: [*c]u32, binary: [*c]u0) callconv(.C) void = undefined;
pub var programBinary: *const fn(program: u32, binaryFormat: u32, binary: [*c]const u0, length: i32) callconv(.C) void = undefined;
pub var programParameteri: *const fn(program: u32, pname: u32, value: i32) callconv(.C) void = undefined;
pub var invalidateFramebuffer: *const fn(target: u32, numAttachments: i32, attachments: [*c]const u32) callconv(.C) void = undefined;
pub var invalidateSubFramebuffer: *const fn(target: u32, numAttachments: i32, attachments: [*c]const u32, x: i32, y: i32, width: i32, height: i32) callconv(.C) void = undefined;
pub var texStorage2D: *const fn(target: u32, levels: i32, internalformat: u32, width: i32, height: i32) callconv(.C) void = undefined;
pub var texStorage3D: *const fn(target: u32, levels: i32, internalformat: u32, width: i32, height: i32, depth: i32) callconv(.C) void = undefined;
pub var getInternalformativ: *const fn(target: u32, internalformat: u32, pname: u32, count: i32, params: [*c]i32) callconv(.C) void = undefined;

const loadFn = (switch (@import("builtin").os.tag) {
    .windows => struct {
        pub const WINAPI = @import("std").os.windows.WINAPI;

        pub extern "opengl32" fn wglGetProcAddress(
            param0: ?[*:0]const u8,
        ) callconv(WINAPI) ?*const fn () callconv(WINAPI) isize;

        pub extern "kernel32" fn GetModuleHandleA(moduleName: ?[*:0]const u8) callconv(WINAPI) ?*anyopaque;
        pub extern "kernel32" fn GetProcAddress(handle: ?*anyopaque, moduleName: ?[*:0]const u8) callconv(WINAPI) ?*anyopaque;

        pub fn load(procName: [*:0]const u8) ?*anyopaque {
            if (wglGetProcAddress(@ptrCast(procName))) |ptr| {
                return @ptrCast(@constCast(ptr));
            }
            @import("std").log.info("loading: {s}", .{ procName });
            const libgl = GetModuleHandleA("opengl32");
            return GetProcAddress(libgl, @ptrCast(procName));
        }
    },
    else => |tag| @compileError("Unsupported OS: " ++ @tagName(tag))
}).load;

pub fn init() void {
    activeTexture = @ptrCast(loadFn("glActiveTexture") orelse @panic("Cannot find proc \"glActiveTexture\""));
    attachShader = @ptrCast(loadFn("glAttachShader") orelse @panic("Cannot find proc \"glAttachShader\""));
    bindAttribLocation = @ptrCast(loadFn("glBindAttribLocation") orelse @panic("Cannot find proc \"glBindAttribLocation\""));
    bindBuffer = @ptrCast(loadFn("glBindBuffer") orelse @panic("Cannot find proc \"glBindBuffer\""));
    bindFramebuffer = @ptrCast(loadFn("glBindFramebuffer") orelse @panic("Cannot find proc \"glBindFramebuffer\""));
    bindRenderbuffer = @ptrCast(loadFn("glBindRenderbuffer") orelse @panic("Cannot find proc \"glBindRenderbuffer\""));
    bindTexture = @ptrCast(loadFn("glBindTexture") orelse @panic("Cannot find proc \"glBindTexture\""));
    blendColor = @ptrCast(loadFn("glBlendColor") orelse @panic("Cannot find proc \"glBlendColor\""));
    blendEquation = @ptrCast(loadFn("glBlendEquation") orelse @panic("Cannot find proc \"glBlendEquation\""));
    blendEquationSeparate = @ptrCast(loadFn("glBlendEquationSeparate") orelse @panic("Cannot find proc \"glBlendEquationSeparate\""));
    blendFunc = @ptrCast(loadFn("glBlendFunc") orelse @panic("Cannot find proc \"glBlendFunc\""));
    blendFuncSeparate = @ptrCast(loadFn("glBlendFuncSeparate") orelse @panic("Cannot find proc \"glBlendFuncSeparate\""));
    bufferData = @ptrCast(loadFn("glBufferData") orelse @panic("Cannot find proc \"glBufferData\""));
    bufferSubData = @ptrCast(loadFn("glBufferSubData") orelse @panic("Cannot find proc \"glBufferSubData\""));
    checkFramebufferStatus = @ptrCast(loadFn("glCheckFramebufferStatus") orelse @panic("Cannot find proc \"glCheckFramebufferStatus\""));
    clear = @ptrCast(loadFn("glClear") orelse @panic("Cannot find proc \"glClear\""));
    clearColor = @ptrCast(loadFn("glClearColor") orelse @panic("Cannot find proc \"glClearColor\""));
    clearDepthf = @ptrCast(loadFn("glClearDepthf") orelse @panic("Cannot find proc \"glClearDepthf\""));
    clearStencil = @ptrCast(loadFn("glClearStencil") orelse @panic("Cannot find proc \"glClearStencil\""));
    colorMask = @ptrCast(loadFn("glColorMask") orelse @panic("Cannot find proc \"glColorMask\""));
    compileShader = @ptrCast(loadFn("glCompileShader") orelse @panic("Cannot find proc \"glCompileShader\""));
    compressedTexImage2D = @ptrCast(loadFn("glCompressedTexImage2D") orelse @panic("Cannot find proc \"glCompressedTexImage2D\""));
    compressedTexSubImage2D = @ptrCast(loadFn("glCompressedTexSubImage2D") orelse @panic("Cannot find proc \"glCompressedTexSubImage2D\""));
    copyTexImage2D = @ptrCast(loadFn("glCopyTexImage2D") orelse @panic("Cannot find proc \"glCopyTexImage2D\""));
    copyTexSubImage2D = @ptrCast(loadFn("glCopyTexSubImage2D") orelse @panic("Cannot find proc \"glCopyTexSubImage2D\""));
    createProgram = @ptrCast(loadFn("glCreateProgram") orelse @panic("Cannot find proc \"glCreateProgram\""));
    createShader = @ptrCast(loadFn("glCreateShader") orelse @panic("Cannot find proc \"glCreateShader\""));
    cullFace = @ptrCast(loadFn("glCullFace") orelse @panic("Cannot find proc \"glCullFace\""));
    deleteBuffers = @ptrCast(loadFn("glDeleteBuffers") orelse @panic("Cannot find proc \"glDeleteBuffers\""));
    deleteFramebuffers = @ptrCast(loadFn("glDeleteFramebuffers") orelse @panic("Cannot find proc \"glDeleteFramebuffers\""));
    deleteProgram = @ptrCast(loadFn("glDeleteProgram") orelse @panic("Cannot find proc \"glDeleteProgram\""));
    deleteRenderbuffers = @ptrCast(loadFn("glDeleteRenderbuffers") orelse @panic("Cannot find proc \"glDeleteRenderbuffers\""));
    deleteShader = @ptrCast(loadFn("glDeleteShader") orelse @panic("Cannot find proc \"glDeleteShader\""));
    deleteTextures = @ptrCast(loadFn("glDeleteTextures") orelse @panic("Cannot find proc \"glDeleteTextures\""));
    depthFunc = @ptrCast(loadFn("glDepthFunc") orelse @panic("Cannot find proc \"glDepthFunc\""));
    depthMask = @ptrCast(loadFn("glDepthMask") orelse @panic("Cannot find proc \"glDepthMask\""));
    depthRangef = @ptrCast(loadFn("glDepthRangef") orelse @panic("Cannot find proc \"glDepthRangef\""));
    detachShader = @ptrCast(loadFn("glDetachShader") orelse @panic("Cannot find proc \"glDetachShader\""));
    disable = @ptrCast(loadFn("glDisable") orelse @panic("Cannot find proc \"glDisable\""));
    disableVertexAttribArray = @ptrCast(loadFn("glDisableVertexAttribArray") orelse @panic("Cannot find proc \"glDisableVertexAttribArray\""));
    drawArrays = @ptrCast(loadFn("glDrawArrays") orelse @panic("Cannot find proc \"glDrawArrays\""));
    drawElements = @ptrCast(loadFn("glDrawElements") orelse @panic("Cannot find proc \"glDrawElements\""));
    enable = @ptrCast(loadFn("glEnable") orelse @panic("Cannot find proc \"glEnable\""));
    enableVertexAttribArray = @ptrCast(loadFn("glEnableVertexAttribArray") orelse @panic("Cannot find proc \"glEnableVertexAttribArray\""));
    finish = @ptrCast(loadFn("glFinish") orelse @panic("Cannot find proc \"glFinish\""));
    flush = @ptrCast(loadFn("glFlush") orelse @panic("Cannot find proc \"glFlush\""));
    framebufferRenderbuffer = @ptrCast(loadFn("glFramebufferRenderbuffer") orelse @panic("Cannot find proc \"glFramebufferRenderbuffer\""));
    framebufferTexture2D = @ptrCast(loadFn("glFramebufferTexture2D") orelse @panic("Cannot find proc \"glFramebufferTexture2D\""));
    frontFace = @ptrCast(loadFn("glFrontFace") orelse @panic("Cannot find proc \"glFrontFace\""));
    genBuffers = @ptrCast(loadFn("glGenBuffers") orelse @panic("Cannot find proc \"glGenBuffers\""));
    generateMipmap = @ptrCast(loadFn("glGenerateMipmap") orelse @panic("Cannot find proc \"glGenerateMipmap\""));
    genFramebuffers = @ptrCast(loadFn("glGenFramebuffers") orelse @panic("Cannot find proc \"glGenFramebuffers\""));
    genRenderbuffers = @ptrCast(loadFn("glGenRenderbuffers") orelse @panic("Cannot find proc \"glGenRenderbuffers\""));
    genTextures = @ptrCast(loadFn("glGenTextures") orelse @panic("Cannot find proc \"glGenTextures\""));
    getActiveAttrib = @ptrCast(loadFn("glGetActiveAttrib") orelse @panic("Cannot find proc \"glGetActiveAttrib\""));
    getActiveUniform = @ptrCast(loadFn("glGetActiveUniform") orelse @panic("Cannot find proc \"glGetActiveUniform\""));
    getAttachedShaders = @ptrCast(loadFn("glGetAttachedShaders") orelse @panic("Cannot find proc \"glGetAttachedShaders\""));
    getAttribLocation = @ptrCast(loadFn("glGetAttribLocation") orelse @panic("Cannot find proc \"glGetAttribLocation\""));
    getBooleanv = @ptrCast(loadFn("glGetBooleanv") orelse @panic("Cannot find proc \"glGetBooleanv\""));
    getBufferParameteriv = @ptrCast(loadFn("glGetBufferParameteriv") orelse @panic("Cannot find proc \"glGetBufferParameteriv\""));
    getError = @ptrCast(loadFn("glGetError") orelse @panic("Cannot find proc \"glGetError\""));
    getFloatv = @ptrCast(loadFn("glGetFloatv") orelse @panic("Cannot find proc \"glGetFloatv\""));
    getFramebufferAttachmentParameteriv = @ptrCast(loadFn("glGetFramebufferAttachmentParameteriv") orelse @panic("Cannot find proc \"glGetFramebufferAttachmentParameteriv\""));
    getIntegerv = @ptrCast(loadFn("glGetIntegerv") orelse @panic("Cannot find proc \"glGetIntegerv\""));
    getProgramiv = @ptrCast(loadFn("glGetProgramiv") orelse @panic("Cannot find proc \"glGetProgramiv\""));
    getProgramInfoLog = @ptrCast(loadFn("glGetProgramInfoLog") orelse @panic("Cannot find proc \"glGetProgramInfoLog\""));
    getRenderbufferParameteriv = @ptrCast(loadFn("glGetRenderbufferParameteriv") orelse @panic("Cannot find proc \"glGetRenderbufferParameteriv\""));
    getShaderiv = @ptrCast(loadFn("glGetShaderiv") orelse @panic("Cannot find proc \"glGetShaderiv\""));
    getShaderInfoLog = @ptrCast(loadFn("glGetShaderInfoLog") orelse @panic("Cannot find proc \"glGetShaderInfoLog\""));
    getShaderPrecisionFormat = @ptrCast(loadFn("glGetShaderPrecisionFormat") orelse @panic("Cannot find proc \"glGetShaderPrecisionFormat\""));
    getShaderSource = @ptrCast(loadFn("glGetShaderSource") orelse @panic("Cannot find proc \"glGetShaderSource\""));
    getString = @ptrCast(loadFn("glGetString") orelse @panic("Cannot find proc \"glGetString\""));
    getTexParameterfv = @ptrCast(loadFn("glGetTexParameterfv") orelse @panic("Cannot find proc \"glGetTexParameterfv\""));
    getTexParameteriv = @ptrCast(loadFn("glGetTexParameteriv") orelse @panic("Cannot find proc \"glGetTexParameteriv\""));
    getUniformfv = @ptrCast(loadFn("glGetUniformfv") orelse @panic("Cannot find proc \"glGetUniformfv\""));
    getUniformiv = @ptrCast(loadFn("glGetUniformiv") orelse @panic("Cannot find proc \"glGetUniformiv\""));
    getUniformLocation = @ptrCast(loadFn("glGetUniformLocation") orelse @panic("Cannot find proc \"glGetUniformLocation\""));
    getVertexAttribfv = @ptrCast(loadFn("glGetVertexAttribfv") orelse @panic("Cannot find proc \"glGetVertexAttribfv\""));
    getVertexAttribiv = @ptrCast(loadFn("glGetVertexAttribiv") orelse @panic("Cannot find proc \"glGetVertexAttribiv\""));
    getVertexAttribPointerv = @ptrCast(loadFn("glGetVertexAttribPointerv") orelse @panic("Cannot find proc \"glGetVertexAttribPointerv\""));
    hint = @ptrCast(loadFn("glHint") orelse @panic("Cannot find proc \"glHint\""));
    isBuffer = @ptrCast(loadFn("glIsBuffer") orelse @panic("Cannot find proc \"glIsBuffer\""));
    isEnabled = @ptrCast(loadFn("glIsEnabled") orelse @panic("Cannot find proc \"glIsEnabled\""));
    isFramebuffer = @ptrCast(loadFn("glIsFramebuffer") orelse @panic("Cannot find proc \"glIsFramebuffer\""));
    isProgram = @ptrCast(loadFn("glIsProgram") orelse @panic("Cannot find proc \"glIsProgram\""));
    isRenderbuffer = @ptrCast(loadFn("glIsRenderbuffer") orelse @panic("Cannot find proc \"glIsRenderbuffer\""));
    isShader = @ptrCast(loadFn("glIsShader") orelse @panic("Cannot find proc \"glIsShader\""));
    isTexture = @ptrCast(loadFn("glIsTexture") orelse @panic("Cannot find proc \"glIsTexture\""));
    lineWidth = @ptrCast(loadFn("glLineWidth") orelse @panic("Cannot find proc \"glLineWidth\""));
    linkProgram = @ptrCast(loadFn("glLinkProgram") orelse @panic("Cannot find proc \"glLinkProgram\""));
    pixelStorei = @ptrCast(loadFn("glPixelStorei") orelse @panic("Cannot find proc \"glPixelStorei\""));
    polygonOffset = @ptrCast(loadFn("glPolygonOffset") orelse @panic("Cannot find proc \"glPolygonOffset\""));
    readPixels = @ptrCast(loadFn("glReadPixels") orelse @panic("Cannot find proc \"glReadPixels\""));
    releaseShaderCompiler = @ptrCast(loadFn("glReleaseShaderCompiler") orelse @panic("Cannot find proc \"glReleaseShaderCompiler\""));
    renderbufferStorage = @ptrCast(loadFn("glRenderbufferStorage") orelse @panic("Cannot find proc \"glRenderbufferStorage\""));
    sampleCoverage = @ptrCast(loadFn("glSampleCoverage") orelse @panic("Cannot find proc \"glSampleCoverage\""));
    scissor = @ptrCast(loadFn("glScissor") orelse @panic("Cannot find proc \"glScissor\""));
    shaderBinary = @ptrCast(loadFn("glShaderBinary") orelse @panic("Cannot find proc \"glShaderBinary\""));
    shaderSource = @ptrCast(loadFn("glShaderSource") orelse @panic("Cannot find proc \"glShaderSource\""));
    stencilFunc = @ptrCast(loadFn("glStencilFunc") orelse @panic("Cannot find proc \"glStencilFunc\""));
    stencilFuncSeparate = @ptrCast(loadFn("glStencilFuncSeparate") orelse @panic("Cannot find proc \"glStencilFuncSeparate\""));
    stencilMask = @ptrCast(loadFn("glStencilMask") orelse @panic("Cannot find proc \"glStencilMask\""));
    stencilMaskSeparate = @ptrCast(loadFn("glStencilMaskSeparate") orelse @panic("Cannot find proc \"glStencilMaskSeparate\""));
    stencilOp = @ptrCast(loadFn("glStencilOp") orelse @panic("Cannot find proc \"glStencilOp\""));
    stencilOpSeparate = @ptrCast(loadFn("glStencilOpSeparate") orelse @panic("Cannot find proc \"glStencilOpSeparate\""));
    texImage2D = @ptrCast(loadFn("glTexImage2D") orelse @panic("Cannot find proc \"glTexImage2D\""));
    texParameterf = @ptrCast(loadFn("glTexParameterf") orelse @panic("Cannot find proc \"glTexParameterf\""));
    texParameterfv = @ptrCast(loadFn("glTexParameterfv") orelse @panic("Cannot find proc \"glTexParameterfv\""));
    texParameteri = @ptrCast(loadFn("glTexParameteri") orelse @panic("Cannot find proc \"glTexParameteri\""));
    texParameteriv = @ptrCast(loadFn("glTexParameteriv") orelse @panic("Cannot find proc \"glTexParameteriv\""));
    texSubImage2D = @ptrCast(loadFn("glTexSubImage2D") orelse @panic("Cannot find proc \"glTexSubImage2D\""));
    uniform1f = @ptrCast(loadFn("glUniform1f") orelse @panic("Cannot find proc \"glUniform1f\""));
    uniform1fv = @ptrCast(loadFn("glUniform1fv") orelse @panic("Cannot find proc \"glUniform1fv\""));
    uniform1i = @ptrCast(loadFn("glUniform1i") orelse @panic("Cannot find proc \"glUniform1i\""));
    uniform1iv = @ptrCast(loadFn("glUniform1iv") orelse @panic("Cannot find proc \"glUniform1iv\""));
    uniform2f = @ptrCast(loadFn("glUniform2f") orelse @panic("Cannot find proc \"glUniform2f\""));
    uniform2fv = @ptrCast(loadFn("glUniform2fv") orelse @panic("Cannot find proc \"glUniform2fv\""));
    uniform2i = @ptrCast(loadFn("glUniform2i") orelse @panic("Cannot find proc \"glUniform2i\""));
    uniform2iv = @ptrCast(loadFn("glUniform2iv") orelse @panic("Cannot find proc \"glUniform2iv\""));
    uniform3f = @ptrCast(loadFn("glUniform3f") orelse @panic("Cannot find proc \"glUniform3f\""));
    uniform3fv = @ptrCast(loadFn("glUniform3fv") orelse @panic("Cannot find proc \"glUniform3fv\""));
    uniform3i = @ptrCast(loadFn("glUniform3i") orelse @panic("Cannot find proc \"glUniform3i\""));
    uniform3iv = @ptrCast(loadFn("glUniform3iv") orelse @panic("Cannot find proc \"glUniform3iv\""));
    uniform4f = @ptrCast(loadFn("glUniform4f") orelse @panic("Cannot find proc \"glUniform4f\""));
    uniform4fv = @ptrCast(loadFn("glUniform4fv") orelse @panic("Cannot find proc \"glUniform4fv\""));
    uniform4i = @ptrCast(loadFn("glUniform4i") orelse @panic("Cannot find proc \"glUniform4i\""));
    uniform4iv = @ptrCast(loadFn("glUniform4iv") orelse @panic("Cannot find proc \"glUniform4iv\""));
    uniformMatrix2fv = @ptrCast(loadFn("glUniformMatrix2fv") orelse @panic("Cannot find proc \"glUniformMatrix2fv\""));
    uniformMatrix3fv = @ptrCast(loadFn("glUniformMatrix3fv") orelse @panic("Cannot find proc \"glUniformMatrix3fv\""));
    uniformMatrix4fv = @ptrCast(loadFn("glUniformMatrix4fv") orelse @panic("Cannot find proc \"glUniformMatrix4fv\""));
    useProgram = @ptrCast(loadFn("glUseProgram") orelse @panic("Cannot find proc \"glUseProgram\""));
    validateProgram = @ptrCast(loadFn("glValidateProgram") orelse @panic("Cannot find proc \"glValidateProgram\""));
    vertexAttrib1f = @ptrCast(loadFn("glVertexAttrib1f") orelse @panic("Cannot find proc \"glVertexAttrib1f\""));
    vertexAttrib1fv = @ptrCast(loadFn("glVertexAttrib1fv") orelse @panic("Cannot find proc \"glVertexAttrib1fv\""));
    vertexAttrib2f = @ptrCast(loadFn("glVertexAttrib2f") orelse @panic("Cannot find proc \"glVertexAttrib2f\""));
    vertexAttrib2fv = @ptrCast(loadFn("glVertexAttrib2fv") orelse @panic("Cannot find proc \"glVertexAttrib2fv\""));
    vertexAttrib3f = @ptrCast(loadFn("glVertexAttrib3f") orelse @panic("Cannot find proc \"glVertexAttrib3f\""));
    vertexAttrib3fv = @ptrCast(loadFn("glVertexAttrib3fv") orelse @panic("Cannot find proc \"glVertexAttrib3fv\""));
    vertexAttrib4f = @ptrCast(loadFn("glVertexAttrib4f") orelse @panic("Cannot find proc \"glVertexAttrib4f\""));
    vertexAttrib4fv = @ptrCast(loadFn("glVertexAttrib4fv") orelse @panic("Cannot find proc \"glVertexAttrib4fv\""));
    vertexAttribPointer = @ptrCast(loadFn("glVertexAttribPointer") orelse @panic("Cannot find proc \"glVertexAttribPointer\""));
    viewport = @ptrCast(loadFn("glViewport") orelse @panic("Cannot find proc \"glViewport\""));
    readBuffer = @ptrCast(loadFn("glReadBuffer") orelse @panic("Cannot find proc \"glReadBuffer\""));
    drawRangeElements = @ptrCast(loadFn("glDrawRangeElements") orelse @panic("Cannot find proc \"glDrawRangeElements\""));
    texImage3D = @ptrCast(loadFn("glTexImage3D") orelse @panic("Cannot find proc \"glTexImage3D\""));
    texSubImage3D = @ptrCast(loadFn("glTexSubImage3D") orelse @panic("Cannot find proc \"glTexSubImage3D\""));
    copyTexSubImage3D = @ptrCast(loadFn("glCopyTexSubImage3D") orelse @panic("Cannot find proc \"glCopyTexSubImage3D\""));
    compressedTexImage3D = @ptrCast(loadFn("glCompressedTexImage3D") orelse @panic("Cannot find proc \"glCompressedTexImage3D\""));
    compressedTexSubImage3D = @ptrCast(loadFn("glCompressedTexSubImage3D") orelse @panic("Cannot find proc \"glCompressedTexSubImage3D\""));
    genQueries = @ptrCast(loadFn("glGenQueries") orelse @panic("Cannot find proc \"glGenQueries\""));
    deleteQueries = @ptrCast(loadFn("glDeleteQueries") orelse @panic("Cannot find proc \"glDeleteQueries\""));
    isQuery = @ptrCast(loadFn("glIsQuery") orelse @panic("Cannot find proc \"glIsQuery\""));
    beginQuery = @ptrCast(loadFn("glBeginQuery") orelse @panic("Cannot find proc \"glBeginQuery\""));
    endQuery = @ptrCast(loadFn("glEndQuery") orelse @panic("Cannot find proc \"glEndQuery\""));
    getQueryiv = @ptrCast(loadFn("glGetQueryiv") orelse @panic("Cannot find proc \"glGetQueryiv\""));
    getQueryObjectuiv = @ptrCast(loadFn("glGetQueryObjectuiv") orelse @panic("Cannot find proc \"glGetQueryObjectuiv\""));
    unmapBuffer = @ptrCast(loadFn("glUnmapBuffer") orelse @panic("Cannot find proc \"glUnmapBuffer\""));
    getBufferPointerv = @ptrCast(loadFn("glGetBufferPointerv") orelse @panic("Cannot find proc \"glGetBufferPointerv\""));
    drawBuffers = @ptrCast(loadFn("glDrawBuffers") orelse @panic("Cannot find proc \"glDrawBuffers\""));
    uniformMatrix2x3fv = @ptrCast(loadFn("glUniformMatrix2x3fv") orelse @panic("Cannot find proc \"glUniformMatrix2x3fv\""));
    uniformMatrix3x2fv = @ptrCast(loadFn("glUniformMatrix3x2fv") orelse @panic("Cannot find proc \"glUniformMatrix3x2fv\""));
    uniformMatrix2x4fv = @ptrCast(loadFn("glUniformMatrix2x4fv") orelse @panic("Cannot find proc \"glUniformMatrix2x4fv\""));
    uniformMatrix4x2fv = @ptrCast(loadFn("glUniformMatrix4x2fv") orelse @panic("Cannot find proc \"glUniformMatrix4x2fv\""));
    uniformMatrix3x4fv = @ptrCast(loadFn("glUniformMatrix3x4fv") orelse @panic("Cannot find proc \"glUniformMatrix3x4fv\""));
    uniformMatrix4x3fv = @ptrCast(loadFn("glUniformMatrix4x3fv") orelse @panic("Cannot find proc \"glUniformMatrix4x3fv\""));
    blitFramebuffer = @ptrCast(loadFn("glBlitFramebuffer") orelse @panic("Cannot find proc \"glBlitFramebuffer\""));
    renderbufferStorageMultisample = @ptrCast(loadFn("glRenderbufferStorageMultisample") orelse @panic("Cannot find proc \"glRenderbufferStorageMultisample\""));
    framebufferTextureLayer = @ptrCast(loadFn("glFramebufferTextureLayer") orelse @panic("Cannot find proc \"glFramebufferTextureLayer\""));
    mapBufferRange = @ptrCast(loadFn("glMapBufferRange") orelse @panic("Cannot find proc \"glMapBufferRange\""));
    flushMappedBufferRange = @ptrCast(loadFn("glFlushMappedBufferRange") orelse @panic("Cannot find proc \"glFlushMappedBufferRange\""));
    bindVertexArray = @ptrCast(loadFn("glBindVertexArray") orelse @panic("Cannot find proc \"glBindVertexArray\""));
    deleteVertexArrays = @ptrCast(loadFn("glDeleteVertexArrays") orelse @panic("Cannot find proc \"glDeleteVertexArrays\""));
    genVertexArrays = @ptrCast(loadFn("glGenVertexArrays") orelse @panic("Cannot find proc \"glGenVertexArrays\""));
    isVertexArray = @ptrCast(loadFn("glIsVertexArray") orelse @panic("Cannot find proc \"glIsVertexArray\""));
    getIntegeri_v = @ptrCast(loadFn("glGetIntegeri_v") orelse @panic("Cannot find proc \"glGetIntegeri_v\""));
    beginTransformFeedback = @ptrCast(loadFn("glBeginTransformFeedback") orelse @panic("Cannot find proc \"glBeginTransformFeedback\""));
    endTransformFeedback = @ptrCast(loadFn("glEndTransformFeedback") orelse @panic("Cannot find proc \"glEndTransformFeedback\""));
    bindBufferRange = @ptrCast(loadFn("glBindBufferRange") orelse @panic("Cannot find proc \"glBindBufferRange\""));
    bindBufferBase = @ptrCast(loadFn("glBindBufferBase") orelse @panic("Cannot find proc \"glBindBufferBase\""));
    transformFeedbackVaryings = @ptrCast(loadFn("glTransformFeedbackVaryings") orelse @panic("Cannot find proc \"glTransformFeedbackVaryings\""));
    getTransformFeedbackVarying = @ptrCast(loadFn("glGetTransformFeedbackVarying") orelse @panic("Cannot find proc \"glGetTransformFeedbackVarying\""));
    vertexAttribIPointer = @ptrCast(loadFn("glVertexAttribIPointer") orelse @panic("Cannot find proc \"glVertexAttribIPointer\""));
    getVertexAttribIiv = @ptrCast(loadFn("glGetVertexAttribIiv") orelse @panic("Cannot find proc \"glGetVertexAttribIiv\""));
    getVertexAttribIuiv = @ptrCast(loadFn("glGetVertexAttribIuiv") orelse @panic("Cannot find proc \"glGetVertexAttribIuiv\""));
    vertexAttribI4i = @ptrCast(loadFn("glVertexAttribI4i") orelse @panic("Cannot find proc \"glVertexAttribI4i\""));
    vertexAttribI4ui = @ptrCast(loadFn("glVertexAttribI4ui") orelse @panic("Cannot find proc \"glVertexAttribI4ui\""));
    vertexAttribI4iv = @ptrCast(loadFn("glVertexAttribI4iv") orelse @panic("Cannot find proc \"glVertexAttribI4iv\""));
    vertexAttribI4uiv = @ptrCast(loadFn("glVertexAttribI4uiv") orelse @panic("Cannot find proc \"glVertexAttribI4uiv\""));
    getUniformuiv = @ptrCast(loadFn("glGetUniformuiv") orelse @panic("Cannot find proc \"glGetUniformuiv\""));
    getFragDataLocation = @ptrCast(loadFn("glGetFragDataLocation") orelse @panic("Cannot find proc \"glGetFragDataLocation\""));
    uniform1ui = @ptrCast(loadFn("glUniform1ui") orelse @panic("Cannot find proc \"glUniform1ui\""));
    uniform2ui = @ptrCast(loadFn("glUniform2ui") orelse @panic("Cannot find proc \"glUniform2ui\""));
    uniform3ui = @ptrCast(loadFn("glUniform3ui") orelse @panic("Cannot find proc \"glUniform3ui\""));
    uniform4ui = @ptrCast(loadFn("glUniform4ui") orelse @panic("Cannot find proc \"glUniform4ui\""));
    uniform1uiv = @ptrCast(loadFn("glUniform1uiv") orelse @panic("Cannot find proc \"glUniform1uiv\""));
    uniform2uiv = @ptrCast(loadFn("glUniform2uiv") orelse @panic("Cannot find proc \"glUniform2uiv\""));
    uniform3uiv = @ptrCast(loadFn("glUniform3uiv") orelse @panic("Cannot find proc \"glUniform3uiv\""));
    uniform4uiv = @ptrCast(loadFn("glUniform4uiv") orelse @panic("Cannot find proc \"glUniform4uiv\""));
    clearBufferiv = @ptrCast(loadFn("glClearBufferiv") orelse @panic("Cannot find proc \"glClearBufferiv\""));
    clearBufferuiv = @ptrCast(loadFn("glClearBufferuiv") orelse @panic("Cannot find proc \"glClearBufferuiv\""));
    clearBufferfv = @ptrCast(loadFn("glClearBufferfv") orelse @panic("Cannot find proc \"glClearBufferfv\""));
    clearBufferfi = @ptrCast(loadFn("glClearBufferfi") orelse @panic("Cannot find proc \"glClearBufferfi\""));
    getStringi = @ptrCast(loadFn("glGetStringi") orelse @panic("Cannot find proc \"glGetStringi\""));
    copyBufferSubData = @ptrCast(loadFn("glCopyBufferSubData") orelse @panic("Cannot find proc \"glCopyBufferSubData\""));
    getUniformIndices = @ptrCast(loadFn("glGetUniformIndices") orelse @panic("Cannot find proc \"glGetUniformIndices\""));
    getActiveUniformsiv = @ptrCast(loadFn("glGetActiveUniformsiv") orelse @panic("Cannot find proc \"glGetActiveUniformsiv\""));
    getUniformBlockIndex = @ptrCast(loadFn("glGetUniformBlockIndex") orelse @panic("Cannot find proc \"glGetUniformBlockIndex\""));
    getActiveUniformBlockiv = @ptrCast(loadFn("glGetActiveUniformBlockiv") orelse @panic("Cannot find proc \"glGetActiveUniformBlockiv\""));
    getActiveUniformBlockName = @ptrCast(loadFn("glGetActiveUniformBlockName") orelse @panic("Cannot find proc \"glGetActiveUniformBlockName\""));
    uniformBlockBinding = @ptrCast(loadFn("glUniformBlockBinding") orelse @panic("Cannot find proc \"glUniformBlockBinding\""));
    drawArraysInstanced = @ptrCast(loadFn("glDrawArraysInstanced") orelse @panic("Cannot find proc \"glDrawArraysInstanced\""));
    drawElementsInstanced = @ptrCast(loadFn("glDrawElementsInstanced") orelse @panic("Cannot find proc \"glDrawElementsInstanced\""));
    fenceSync = @ptrCast(loadFn("glFenceSync") orelse @panic("Cannot find proc \"glFenceSync\""));
    isSync = @ptrCast(loadFn("glIsSync") orelse @panic("Cannot find proc \"glIsSync\""));
    deleteSync = @ptrCast(loadFn("glDeleteSync") orelse @panic("Cannot find proc \"glDeleteSync\""));
    clientWaitSync = @ptrCast(loadFn("glClientWaitSync") orelse @panic("Cannot find proc \"glClientWaitSync\""));
    waitSync = @ptrCast(loadFn("glWaitSync") orelse @panic("Cannot find proc \"glWaitSync\""));
    getInteger64v = @ptrCast(loadFn("glGetInteger64v") orelse @panic("Cannot find proc \"glGetInteger64v\""));
    getSynciv = @ptrCast(loadFn("glGetSynciv") orelse @panic("Cannot find proc \"glGetSynciv\""));
    getInteger64i_v = @ptrCast(loadFn("glGetInteger64i_v") orelse @panic("Cannot find proc \"glGetInteger64i_v\""));
    getBufferParameteri64v = @ptrCast(loadFn("glGetBufferParameteri64v") orelse @panic("Cannot find proc \"glGetBufferParameteri64v\""));
    genSamplers = @ptrCast(loadFn("glGenSamplers") orelse @panic("Cannot find proc \"glGenSamplers\""));
    deleteSamplers = @ptrCast(loadFn("glDeleteSamplers") orelse @panic("Cannot find proc \"glDeleteSamplers\""));
    isSampler = @ptrCast(loadFn("glIsSampler") orelse @panic("Cannot find proc \"glIsSampler\""));
    bindSampler = @ptrCast(loadFn("glBindSampler") orelse @panic("Cannot find proc \"glBindSampler\""));
    samplerParameteri = @ptrCast(loadFn("glSamplerParameteri") orelse @panic("Cannot find proc \"glSamplerParameteri\""));
    samplerParameteriv = @ptrCast(loadFn("glSamplerParameteriv") orelse @panic("Cannot find proc \"glSamplerParameteriv\""));
    samplerParameterf = @ptrCast(loadFn("glSamplerParameterf") orelse @panic("Cannot find proc \"glSamplerParameterf\""));
    samplerParameterfv = @ptrCast(loadFn("glSamplerParameterfv") orelse @panic("Cannot find proc \"glSamplerParameterfv\""));
    getSamplerParameteriv = @ptrCast(loadFn("glGetSamplerParameteriv") orelse @panic("Cannot find proc \"glGetSamplerParameteriv\""));
    getSamplerParameterfv = @ptrCast(loadFn("glGetSamplerParameterfv") orelse @panic("Cannot find proc \"glGetSamplerParameterfv\""));
    vertexAttribDivisor = @ptrCast(loadFn("glVertexAttribDivisor") orelse @panic("Cannot find proc \"glVertexAttribDivisor\""));
    bindTransformFeedback = @ptrCast(loadFn("glBindTransformFeedback") orelse @panic("Cannot find proc \"glBindTransformFeedback\""));
    deleteTransformFeedbacks = @ptrCast(loadFn("glDeleteTransformFeedbacks") orelse @panic("Cannot find proc \"glDeleteTransformFeedbacks\""));
    genTransformFeedbacks = @ptrCast(loadFn("glGenTransformFeedbacks") orelse @panic("Cannot find proc \"glGenTransformFeedbacks\""));
    isTransformFeedback = @ptrCast(loadFn("glIsTransformFeedback") orelse @panic("Cannot find proc \"glIsTransformFeedback\""));
    pauseTransformFeedback = @ptrCast(loadFn("glPauseTransformFeedback") orelse @panic("Cannot find proc \"glPauseTransformFeedback\""));
    resumeTransformFeedback = @ptrCast(loadFn("glResumeTransformFeedback") orelse @panic("Cannot find proc \"glResumeTransformFeedback\""));
    getProgramBinary = @ptrCast(loadFn("glGetProgramBinary") orelse @panic("Cannot find proc \"glGetProgramBinary\""));
    programBinary = @ptrCast(loadFn("glProgramBinary") orelse @panic("Cannot find proc \"glProgramBinary\""));
    programParameteri = @ptrCast(loadFn("glProgramParameteri") orelse @panic("Cannot find proc \"glProgramParameteri\""));
    invalidateFramebuffer = @ptrCast(loadFn("glInvalidateFramebuffer") orelse @panic("Cannot find proc \"glInvalidateFramebuffer\""));
    invalidateSubFramebuffer = @ptrCast(loadFn("glInvalidateSubFramebuffer") orelse @panic("Cannot find proc \"glInvalidateSubFramebuffer\""));
    texStorage2D = @ptrCast(loadFn("glTexStorage2D") orelse @panic("Cannot find proc \"glTexStorage2D\""));
    texStorage3D = @ptrCast(loadFn("glTexStorage3D") orelse @panic("Cannot find proc \"glTexStorage3D\""));
    getInternalformativ = @ptrCast(loadFn("glGetInternalformativ") orelse @panic("Cannot find proc \"glGetInternalformativ\""));}